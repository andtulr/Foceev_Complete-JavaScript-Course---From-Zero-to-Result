/*
________________________________ 4. Основы работы с DOM ______________________________________
----------------------------------------------------------------------------------------------
-------------------------------- 1. Prettier и как работают сниппеты. ------------------------

-------------------------------- 2. Что такое DOM и Окружение JS. ------------------------

-------------------------------- 3. Получение HTML Элементов ------------------------
---- доступ через метод .querySelector
document.querySelector(".____") - по классу
document.querySelector("#____") - по ID
document.querySelector(".list .list__item") - первый на странице дочерний элемент, элемента под классом .list
let h = document.querySelector(".header");
console.log(h) //<h1 class="header">Hello Andrei</h1>
---- доступ через метод . querySelectorAll
let l = document.querySelectorAll(".nav__item");
console.log(l);
// NodeList(3) [li.nav__item, li.nav__item, li.nav__item]
0: li.nav__item
1: li.nav__item
2: li.nav__item
length: 3
[[Prototype]]: NodeList

------------- дополнительные методы получения доступа к элементам ---------
 document.getElementById("id"); - Возвращает элемент
 document.getElementsByClassName('test') - Возвращают коллекцию
 document.getElementsByTagName("li") - Возвращают коллекцию

-------------------------------- 4. Что такое HTML узлы и родство элементов ------------------------
каждый узел которого является объектом документа
Получение узлов дерева DOM - 
document.querySelector(".ИМЯ").childNodes
Для получения узлов есть 6 свойств в объекте любого тега - 
1)childNodes - коллекция (псевдо-массив) содержит список всех детей, включая текстовые узлы и комментарии
2)firstChild - обеспечивает доступ к первому дочернему узлу
3)lastChild  - обеспечивают доступ к последнему дочернему узлу
4)nextSibling - обеспечивают доступ к следующему соседнему узлу
5)previousSibling - обеспечивают доступ к предыдущему соседнему узлу
6)parentNode - обеспечивают доступ к родительскому узлу

-------------------------------- 5. Что такое псевдомассив ------------------------
У псевдомассива нет свойств и методов.
псевдомассив - массив (встроенный метод: Array.from())
let navItems = document.querySelectorAll("li") - доступ через метод .querySelector по тэгу
console.log(navItems) - NodeList(3) [li.nav__item, li.nav__item, li.nav__item] - трт тэга (0, 1, 2) с клвссами
console.log(navItems[1]) - к первому.
Array - Массив
NodeList - псевдоМассив

-------------------------------- 6. Как работают циклы for(для) of(из) и for in(в) ------------------------
let arr = [ 1, 2, 3, 4, 5];
for (let i = 0; i < arr.length; i++) {
    console.log(i); - ЦИКЛ for
}
for.. of - со значением в массивах и псевдомассивах;
for.. in - с ключами в объектах, массивах,псевдомассивах;
for (let key in ИМЯ) {
    console.log(key); // выводим ключи
    console.log(ИМЯ[key]); // выводим значение
}

-------------------------------- 7. Получение и изменение содержимого тегов ------------------------

Свойства для получения и изменения тегов :
 elem.innerHTML - получает и изменяет содержимое тега
 let elem = document.querySelector("h1");
console.log(elem.innerHTML);
elem.innerHTML = "Hello Irina" // Hello Andrei - Hello Irina
 elem.textContent - получает и изменяет только текст внутри тегов
 elem.outerHTML - получает и изменяет сам тег вместе с его содержимым
 elem.data - получает и изменяет содержимое узла

-------------------------------- 8. Создание и вставка новых элементов DOM ------------------------

___Создание новых элементов
Для создания тега используем метод объекта "document": document.createElement("название тэга")
Для создания текстового узла используем метод объекта document: document.createTextNode("Some text")
___Вставка нового элемента
Для вставки нового элемента перед выбранным: existElem.before(newElem);
Для вставки нового элемента после выбранного: existElem.after(newElem);
Для вставки нового элемента внутрь выбранного и перед его содержимым : existElem.prepend(newElem);
Для вставки нового элемента внутрь выбранного и после его содержимого : existElem.append(newElem);

let h1He = document.querySelector("h1"); - доступ к тэгу в ДОК.(определение места вставки)
let h2He = document.createElement("h2"); - создание нового тега

h2He.innerHTML = "Доброе утро"; - вставка содержимого (text) в новый (созданный) тэг
       новый элемент.метод вставки(место вставки)
 новый элемент - записанный в переменную
 метод вставки - before(перед), after(после), prepend(внутрь-перед), append(внутрь-после);
h1He.before(h2He); h2-перед-h1
console.log(h2He); вывод h2

Методы точечной вставки элементов:
Позволяют указать второй параметр - новый элемент.метод вставки(место вставки, новый текст); Это параметр текста, который будет помещен внутрь вставляемого элемента.
                возможный вариант - новый элемент.метод вставки(новый текст); появляется более удобный способ вставки текста в нужное место тегов.
Вставляемый текст — безопасен. То есть, если в текст ввести теги, то сайт отобразит теги как текст, а не как теги.

-------------------------------- 9. Как работает InsertAdjastmentHTML ------------------------
        insertAdjacentHTML / Element / Text
   Методы позволяют вставлять в нужные места либо HTML код, либо Eement, либо Text.
 Метод принимает 2 параметра в кавычках:
первый параметр — куда вставляется HTML / Element / Text; afterbegin - место вставки после элемента, beforeend - место вставки перед элементом.
второй параметр — что вставляется — HTML / Element / Text;
имя элемента(полученного).insertAdjacentHTML("afterbegin или beforeend", "тэг со значением")

let h1He = document.querySelector("h1");
h1He.insertAdjacentHTML("beforeend", "<p>Some text</p>"); //лучше использовать для HTML-тэгов

-------------------------------- 10. Клонирование, перемещение и удаление элементов ------------------------

__________Клонирование элементов:
------МЕТОДЫ------
elem.cloneNode()     - клонировать элемент (без его содержимым(ПР. ul-li));
elem.cloneNode(true) - клонировать элемент (вместе с его содержимым);
__________Перемещение элементов:
------МЕТОДЫ------
existElem.before(Elem)  - 
existElem.after(Elem)   - 
existElem.prepend(Elem) - 
existElem.append(Elem)  - 
__________Удаление элемента:
------МЕТОДЫ------
elem.remove() - удалить элемент;

-------------------------------- 11. Изменение CSS стилей с помощью JS ------------------------
У любого HTML объекта есть свойство "style", в котором содержатся все возможные стили элемента.
let ИМЯПЕР = document.querySelector("элемент");
ИМЯПЕР.style.названиеСтиля = "значениеСтиля"; ------ перезаписывание одного стиля (который в тэгах файла HTML)

elem.style.cssText - свойство для прописи сразу множество стилей в привычном css виде (которые в тэгах файла HTML)
ИМЯПЕР.style.cssText = `
    св-воСтиля: значениеСвСтиля;
    св-воСтиля: значениеСвСтиля;
    св-воСтиля: значениеСвСтиля;
    `;
    Запись в инлайн стили:
одинлчный вариант:
let he = document.querySelector("h1");
console.log(he);
console.dir(he); // Просмотр вех стилей у свойства
console.dir(he.style); // Просмотр вех стилей у свойства
he.style.marginBottom = "300px";
he.style.fontSize = "50px";

несколько стилей напрямую вариант:
let he = document.querySelector("h1");
console.log(he);
console.dir(he); // Просмотр вех стилей у свойства
console.dir(he.style); // Просмотр вех стилей у свойства
he.style.cssText = `
    color: red;
    margin-bottom: 300px;
    font-size: 3em;
    `;
    
Изменение стилей через классы:
свойство .classList и методы св-ва
-------позволяет добавлять класс - element.classList.add("...");
let pO = document.querySelector ("p");
console.dir(pO.style);
pO.classList.add("newClass");

-------позволяет удалять класс - element.classList.remove("...");

-------позволяет добавлять класс - если нет
                 удалять класс   - если есть - element.classList.toggle("...");

-------позволяет прверять наличие класса - возвращает true/false element.classList.contains("...");

через .className возможно прописать новый класс - старый удаляется - возможно получить существующий класс

метод объекта window - ПЕР = getComputedStyle(ЭЛ) - ознакомление со всеми стилями элемента
                       ПЕР = getComputedStyle(ЭЛ, " ::before"); + псевдоЭл
ПЕР.стиль - выводит значение стиля ПР:console.log(pO.marginBottom); - по результату - действие
 метод строку - число parseInt(ПЕР.стиль); число - действие

 стили для несколько тэгов ul-li li li - необходимо перебор ---for (let value of ИМЯпеременной)---
let liP = document.querySelectorAll("li");
for (let value of liP) {                                
    value.classList.add("newClass");
}


-------------------------------- 12. Получение и изменение атрибутов DOM элементов ------------------------
++++++ При помощи JS возможно получение и иэменение атрибутов.
--- Атрибуты тегов ---
Каждый HTML тег содержит свои атрибуты
let ИМЯ = document.querySelectorAll("ТЭГ"); - получить доступ к тэгу
ТЭГ.АТР = "присвоить новое значение"    - получить доступ к тэгу-атрибуту                                       

--- Методы атрибутов ---
 elem.hasAttribute("ИМЯаТР") --- проверяет наличие атрибута (true/false)
 elem.getAttribute("ИМЯаТР") --- получает значение
 elem.setAttribute("ИМЯаТР", "ЗНАЧаТР") --- устанавливает атрибут
 elem.removeAttribute("ИМЯаТР") --- удаляет атрибут


 -------------------------------- 13. Что такое обработчик события на странице ------------------------------
 







*/


